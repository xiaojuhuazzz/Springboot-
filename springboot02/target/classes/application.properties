#配置数据源信息
spring.datasource.url=jdbc:mysql://localhost:3306/test1
spring.datasource.username=root
spring.datasource.password=1230112301
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#连接JNDI数据源
#当你将应用部署于应用服务器上的时候想让数据源由应用服务器管理，那么可以使用如下配置方式引入JNDI数据源。
#spring.datasource.jndi-name=java:jboss/datasources/customers
#hibernate的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。
spring.jpa.properties.hibernate.hbm2ddl.auto=create-drop
#开启hibernate对sql语句的打印
spring.jpa.properties.hibernate.show_sql=true
#create：
#每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop ：
#每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：
#最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
#validate ：
#每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
#spring.datasource.primary.url=jdbc:mysql://localhost:3306/test1
#spring.datasource.primary.username=root
#spring.datasource.primary.password=root
#spring.datasource.primary.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.secondary.url=jdbc:mysql://localhost:3306/test2
#spring.datasource.secondary.username=root
#spring.datasource.secondary.password=root
#spring.datasource.secondary.driver-class-name=com.mysql.jdbc.Driver
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.pool.max-idle=8
spring.redis.pool.min-idle=0
spring.redis.pool.max-active=8
spring.redis.pool.max-wait=-1
#这样的配置 使 Spring Boot会在侦测到存在Redis的依赖并且Redis的配置是可用的，使用RedisCacheManager初始化CacheManager
